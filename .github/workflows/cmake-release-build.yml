name: Build and Release Yggdrasil Tray

on:
  push:
    tags:
      - "*" # Run only on tag pushes
  workflow_dispatch: # Allow manual triggering of the workflow (optional)

env:
  BUILD_TYPE: Release

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - uses: actions/checkout@v4

    # Step 2: Extract the version from the Git tag
    - name: Get Version from Git Tag
      id: get_version
      run: |
        if [ -z "${{ github.ref_name }}" ]; then
          echo "No tag found. Exiting."
          exit 1
        fi
        echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y \
        cmake \
        build-essential \
        qtbase5-dev \
        qt5-qmake \
        qttools5-dev \
        wget \
        fuse \
        libfuse2 \
        libcheck-dev
        # Configure FUSE for use in container
        sudo modprobe fuse
        sudo chmod 666 /dev/fuse
        sudo chown root:$USER /dev/fuse

    # Step 4: Build regular package
    - name: Build Regular Package
      run: |
        rm -rf build_regular
        mkdir build_regular
        cd build_regular
        cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
        make VERBOSE=1
        tar -czvf yggtray-${{ env.VERSION }}.tar.gz yggtray

    # Step 5: Build AppImage
    - name: Build AppImage
      run: |
        rm -rf build_appimage
        mkdir build_appimage
        cd build_appimage
        cmake ..
        make appimage

    # Step 6: Upload artifacts
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: yggtray-packages
        path: |
          build_regular/yggtray-${{ env.VERSION }}.tar.gz
          build_appimage/YggdrasilTray-${{ env.VERSION }}-x86_64.AppImage

    # Step 7: Create Release and Upload Assets
    - name: Create Release and Upload Assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_REPO: ${{ github.repository }}
      run: |
        # Get the tag message to use as release notes
        TAG_MSG=$(git tag -l --format='%(contents)' ${{ env.VERSION }})
        gh release create "${{ env.VERSION }}" \
          --title "Yggdrasil Tray v${{ env.VERSION }}" \
          --notes "$TAG_MSG" \
          "build_regular/yggtray-${{ env.VERSION }}.tar.gz" \
          "build_appimage/YggdrasilTray-${{ env.VERSION }}-x86_64.AppImage"
